#
#import optparse
#import time
#import xmlrpclib
#import socket
#import os
#import sys
#import glob
import pickle
#import random
#import resource

import logger
#import tool
#from config import Config
#from plcapi import PLCAPI

#from suds.client import Client
class GetPearl:
    #PLUGIN_PATH = "/usr/share/NodeManager/plugins"

    #DB_FILE = "/var/lib/nodemanager/getslivers.pickle"

    #MAP_FILE = "/var/lib/nodemanager/slicemap.pickle"
    
    #ROUTER_FILE = "/var/lib/nodemanager/router.pickle"
    VSLIVER_FILE = "/var/lib/myplc/vip.pickle"
    VIP_FILE = "/var/lib/myplc/vip.pickle"
    VMAC_FILE = "/var/lib/myplc/vmac.pickle"
    VLANID_FILE = "/var/lib/myplc/vlanid.pickle"
    PEARL_DPID = 1
    NODE_ID = 32

    PEARL_API_URL = "http://192.168.1.43:8080?wsdl"
    PEARL_DEFAULT_CONFIG = "/etc/planetlab/pearl_default_config.xml"
    
    def GetPearlVip(self,slice_id,node_id):
        vip = self.getvip()
        vsliver = self.loadvsliver()
        for vslivers in vsliver:
            if vslivers['slice_id'] == slice_id and vsliver['node_id'] == node_id:
                vsliver['vip']=vip
            else:
                vslivers = self.initevsliver(slice_id,node_id,vip,'none','none')
                vsliver.append(vslivers)
        self.savesliver(vsliver)  
        return vip
    def GetPearlVmac(self,slice_id,node_id):
        vmac = self.getvmac()
        vsliver = self.loadvsliver()
        for vslivers in vsliver:
            if vslivers['slice_id'] == slice_id and vsliver['node_id'] == node_id:
                vsliver['vmac']=vmac
            else:
                vslivers = self.initevsliver(slice_id,node_id,'none',vmac,'none')
                vsliver.append(vslivers)
        self.savesliver(vsliver)  
        return vmac
    def GetPearlVlanid(self,slice_id,node_id):
        vlanid = self.getvlanid()
        vsliver = self.loadvsliver()
        for vslivers in vsliver:
            if vslivers['slice_id'] == slice_id and vsliver['node_id'] == node_id:
                vsliver['vlanid']=vlanid
            else:
                vslivers = self.initevsliver(slice_id,node_id,'none','none',vlanid)
                vsliver.append(vslivers)
        self.savesliver(vsliver)  
        return vlanid
    def UpdatePearl(self,slice_id,node_id,vip,vmac,vlanid):
        vslivers = self.loadvsliver()
        for vsliver in vslivers:
            if vsliver[slice_id] == slice_id and vsliver[node_id] == node_id:
                if vip != 'none':
                    vsliver['vip'] = vip
                if vmac != 'none':
                    vsliver['vmac'] = vmac
                if vlanid != 'none':
                    vsliver['vlanid'] = vlanid
        self.savevsliver(vslivers)
        return 0
    def initevsliver(self,slice_id,node_id,vip,vmac,vlanid):
        sliver = {}
        sliver['slice_id']=slice_id
        sliver['node_id']=node_id
        sliver['vip']=vip
        sliver['vmac']=vmac
        sliver['vlanid']=vlanid
        return sliver



    def getvip(self):
        vip = self.loadvip()
        for vips in vip:
             if vips['status'] == 'available':
             	vips['status'] = 'used'
             	#router.remove(routerid)
             	#router.append(routerid)
             	self.savevip(vip)
             	return vips['ip']

        return 0       
    def getvmac(self):
        vmac = self.loadvmac()
        
        for vmacs in vmac:
             if vmacs['status'] == 'available':
             	vmacs['status'] = 'used'
             	#router.remove(routerid)
             	#router.append(routerid)
             	self.savevmac(vmac)
             	return vmacs['mac']
        return 0       

    def getvlanid(self):
        vlanids = self.loadvlanid()
        for vlanid in vlanids:
             if vlanid['status'] == 'available':
             	vlanid['status'] = 'used'
             	self.savevlanid(vlanids)
             	return vlanid['vlanid']
        return 0       
    def savesliver(vsliver):
        f = open(GetPearl.VSLIVER, "w")
        logger.log ("myplc: saving successfully vsliver in %s" % GetPearl.VIP_FILE)
        pickle.dump(vsliver, f)
        f.close()
        logger.log_router(vsliver,"This is writed to db")

    def savevip (self, vip):
        f = open(GetPearl.VIP_FILE, "w")
        logger.log ("myplc: saving successfully router id in %s" % GetPearl.VIP_FILE)
        pickle.dump(vip, f)
        f.close()
        logger.log_router(vip,"This is writed to db")
    def savevmac (self, vmac):
        f = open(GetPearl.VMAC_FILE, "w")
        logger.log ("myplc: saving successfully router mac in %s" % GetPearl.VMAC_FILE)
        pickle.dump(vmac, f)
        f.close()
        logger.log_router(vmac,"This is writed to db")
   
    def savevlanid (self, vid):
        f = open(GetPearl.VLANID_FILE, "w")
        logger.log ("myplc: saving successfully vlan id in %s" % GetPearl.VLANID_FILE)
        pickle.dump(vid, f)
        f.close()
        logger.log_router(vid,"This is writed to db")
    def loadvsliver(sefl):
        try:
            f = open(GetPearl.VSLIVER_FILE, "r+")
            logger.log("myplc: restoring latest known vsliver from %s" % GetPearl.VSLIVER_FILE)
            vsliver = pickle.load(f)
            f.close()
            return vsliver
        except:
            logger.log("Could not restore vsliver from %s" % GetPearl.VSLIVER_FILE)
            vsliver=[]
            
            return vsliver

    def loadvip(self):
        try:
            f = open(GetPearl.VIP_FILE, "r+")
            logger.log("myplc: restoring latest known vip from %s" % GetPearl.VIP_FILE)
            vips = pickle.load(f)
            f.close()
            return vips
        except:
            logger.log("Could not restore vip from %s" % GetPearl.VIP_FILE)
            vips = []    
            
            for i in range(128,254):
                vip = {}
                vip['ip'] = '192.168.122.'+str(i)
                vip['status'] = 'available'
                vips.append(vip)                
            return vips

    def loadvmac(self):
        try:
            f = open(GetPearl.VMAC_FILE, "r+")
            logger.log("myplc: restoring latest known vip from %s" % GetPearl.VMAC_FILE)
            vmacs = pickle.load(f)
            f.close()
            return vmacs
        except:
            logger.log("Could not restore vip from %s" % GetPearl.VMAC_FILE)
            vmacs = []    
            
            for i in range(1,15):
                vmac = {}
                vmac['mac'] = '24:3f:d0:39:52:0'+(str(hex(i)))[2:]
                vmac['status'] = 'available'
                vmacs.append(vmac)
            for i in range(16,128):
                vmac = {}
                vmac['mac'] = '24:3f:d0:39:52:'+(str(hex(i)))[2:]
                vmac['status'] = 'available'
                vmacs.append(vmac)
            return vmacs
    
    def loadvlanid(self):
        try:
            f = open(GetPearl.VLANID_FILE, "r+")
            logger.log("myplc: restoring latest known vlanid from %s" % GetPearl.VLANID_FILE)
            vids = pickle.load(f)
            f.close()
            return vids
        except:
            logger.log("Could not restore vip from %s" % GetPearl.VLANID_FILE)
            vids = []    
            
            for i in range(2000, 4095):
                vid = {}
                vid['vlanid'] = str(i)
                vid['status'] = 'available'
                vids.append(vid)
            return vids
     

